import { bytesToHex } from '@metamask/utils';
import { describe, it, expect } from 'vitest';

import {
  encodeDelegations,
  decodeDelegations,
  ROOT_AUTHORITY,
  hashDelegation,
} from '../src/delegation';
import type { DelegationStruct, CaveatStruct } from '../src/types';

describe('delegation', () => {
  describe('ROOT_AUTHORITY', () => {
    it('is the correct constant', () => {
      expect(ROOT_AUTHORITY).toBe(
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
      );
    });
  });

  describe('encodeDelegations', () => {
    it('encodes empty array of delegations', () => {
      const result = encodeDelegations([]);

      expect(result).toMatchInlineSnapshot(
        `"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('encodes single delegation with no caveats', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x0n,
        signature: '0x123456',
      };

      const result = encodeDelegations([delegation]);

      expect(result).toMatchInlineSnapshot(
        `"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031234560000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('encodes single delegation with caveats', () => {
      const caveat: CaveatStruct = {
        enforcer: '0x9999999999999999999999999999999999999999',
        terms: '0xdeadbeef',
        args: '0xcafebabe',
      };

      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [caveat],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const result = encodeDelegations([delegation]);

      expect(result).toMatchInlineSnapshot(
        `"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009999999999999999999999999999999999999999000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004cafebabe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003789abc0000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('encodes multiple delegations', () => {
      const delegation1: DelegationStruct = {
        delegate: '0x1111111111111111111111111111111111111111',
        delegator: '0x2222222222222222222222222222222222222222',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x1n,
        signature: '0xaaa',
      };

      const delegation2: DelegationStruct = {
        delegate: '0x3333333333333333333333333333333333333333',
        delegator: '0x4444444444444444444444444444444444444444',
        authority:
          '0x5555555555555555555555555555555555555555555555555555555555555555',
        caveats: [],
        salt: 0x2n,
        signature: '0xbbb',
      };

      const result = encodeDelegations([delegation1, delegation2]);

      expect(result).toMatchInlineSnapshot(
        `"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000011111111111111111111111111111111111111110000000000000000000000002222222222222222222222222222222222222222ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333330000000000000000000000004444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555555555555500000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bbb000000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('encodes delegation with multiple caveats', () => {
      const caveat1: CaveatStruct = {
        enforcer: '0x1111111111111111111111111111111111111111',
        terms: '0xdeadbeef',
        args: '0xcafebabe',
      };

      const caveat2: CaveatStruct = {
        enforcer: '0x2222222222222222222222222222222222222222',
        terms: '0xfeedface',
        args: '0xdeadc0de',
      };

      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [caveat1, caveat2],
        salt: 0x123n,
        signature: '0x456789',
      };

      const result = encodeDelegations([delegation]);

      expect(result).toMatchInlineSnapshot(
        `"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000001111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004cafebabe000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004feedface000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004deadc0de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034567890000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('handles delegation with custom authority', () => {
      const customAuthority =
        '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd';
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: customAuthority,
        caveats: [],
        salt: 0x999n,
        signature: '0xffffff',
      };

      const result = encodeDelegations([delegation]);

      expect(result).toMatchInlineSnapshot(
        `"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000099900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ffffff0000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('handles delegation with large salt', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn,
        signature: '0x123',
      };

      const result = encodeDelegations([delegation]);

      expect(result).toMatchInlineSnapshot(
        `"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020123000000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('handles delegation with empty signature', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x0n,
        signature: '0x',
      };

      const result = encodeDelegations([delegation]);

      expect(result).toMatchInlineSnapshot(
        `"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('produces consistent output for same input', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x123456',
      };

      const result1 = encodeDelegations([delegation]);
      const result2 = encodeDelegations([delegation]);

      expect(result1).toBe(result2);
    });

    it('handles mixed case addresses correctly', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890', // test case handling
        delegator: '0xAbCdEf0123456789012345678901234567890123', // mixed case
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0xaaBBccDDeeFF1122334455667788990011223344', // mixed case
            terms: '0xdead',
            args: '0xbeef',
          },
        ],
        salt: 0x1n,
        signature: '0x789',
      };

      const result = encodeDelegations([delegation]);

      expect(result).toMatchInlineSnapshot(
        `"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000aabbccddeeff1122334455667788990011223344000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002dead0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002beef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020789000000000000000000000000000000000000000000000000000000000000"`,
      );
    });

    it('encodes as specified return type', () => {
      const caveat: CaveatStruct = {
        enforcer: '0x9999999999999999999999999999999999999999',
        terms: '0xdeadbeef',
        args: '0xcafebabe',
      };

      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [caveat],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const resultHex: string = encodeDelegations([delegation], { out: 'hex' });

      expect(typeof resultHex).toBe('string');

      const resultBytes: Uint8Array = encodeDelegations([delegation], {
        out: 'bytes',
      });

      expect(resultBytes).toBeInstanceOf(Uint8Array);

      let hexFromBytes = '0x';

      for (const byte of resultBytes) {
        hexFromBytes += byte.toString(16).padStart(2, '0');
      }

      expect(resultHex).toBe(hexFromBytes);
    });
  });

  describe('decodeDelegations', () => {
    it('decodes empty array of delegations', () => {
      const encoded =
        '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toEqual([]);
    });

    it('decodes single delegation with no caveats', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x0n,
        signature: '0x123456',
      };

      const encoded = encodeDelegations([delegation]);

      const result = decodeDelegations(encoded);

      expect(result).toStrictEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123',
          authority: ROOT_AUTHORITY,
          caveats: [],
          salt: 0n,
          signature: '0x123456',
        },
      ]);
    });

    it('decodes single delegation with caveats', () => {
      const encoded =
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009999999999999999999999999999999999999999000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004cafebabe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003789abc0000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123',
          authority: ROOT_AUTHORITY,
          caveats: [
            {
              enforcer: '0x9999999999999999999999999999999999999999',
              terms: '0xdeadbeef',
              args: '0xcafebabe',
            },
          ],
          salt: 66n,
          signature: '0x789abc',
        },
      ]);
    });

    it('decodes multiple delegations', () => {
      const encoded =
        '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000011111111111111111111111111111111111111110000000000000000000000002222222222222222222222222222222222222222ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333330000000000000000000000004444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555555555555500000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bbb000000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toEqual([
        {
          delegate: '0x1111111111111111111111111111111111111111',
          delegator: '0x2222222222222222222222222222222222222222',
          authority: ROOT_AUTHORITY,
          caveats: [],
          salt: 1n,
          signature: '0x0aaa',
        },
        {
          delegate: '0x3333333333333333333333333333333333333333',
          delegator: '0x4444444444444444444444444444444444444444',
          authority:
            '0x5555555555555555555555555555555555555555555555555555555555555555',
          caveats: [],
          salt: 2n,
          signature: '0x0bbb',
        },
      ]);
    });

    it('decodes delegation with multiple caveats', () => {
      const encoded =
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000001111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004cafebabe000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004feedface000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004deadc0de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034567890000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123',
          authority: ROOT_AUTHORITY,
          caveats: [
            {
              enforcer: '0x1111111111111111111111111111111111111111',
              terms: '0xdeadbeef',
              args: '0xcafebabe',
            },
            {
              enforcer: '0x2222222222222222222222222222222222222222',
              terms: '0xfeedface',
              args: '0xdeadc0de',
            },
          ],
          salt: 291n,
          signature: '0x456789',
        },
      ]);
    });

    it('decodes delegation with custom authority', () => {
      const encoded =
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000099900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ffffff0000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123',
          authority:
            '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd',
          caveats: [],
          salt: 2457n,
          signature: '0xffffff',
        },
      ]);
    });

    it('decodes delegation with large salt', () => {
      const encoded =
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020123000000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123',
          authority: ROOT_AUTHORITY,
          caveats: [],
          salt: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn,
          signature: '0x0123',
        },
      ]);
    });

    it('decodes delegation with empty signature', () => {
      const encoded =
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123',
          authority: ROOT_AUTHORITY,
          caveats: [],
          salt: 0n,
          signature: '0x',
        },
      ]);
    });

    it('returns hex values by default', () => {
      const encoded =
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031234560000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded);

      expect(result).toHaveLength(1);
      expect(typeof result[0]?.delegate).toBe('string');
      expect((result[0]?.delegate as string).startsWith('0x')).toBe(true);
    });

    it('returns bytes when specified', () => {
      const encoded =
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001234567890123456789012345678901234567890000000000000000000000000abcdef0123456789012345678901234567890123ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031234560000000000000000000000000000000000000000000000000000000000';

      const result = decodeDelegations(encoded, { out: 'bytes' });

      expect(result).toHaveLength(1);
      expect(result[0]?.delegate).toBeInstanceOf(Uint8Array);
      expect(result[0]?.delegator).toBeInstanceOf(Uint8Array);
      expect(result[0]?.authority).toBeInstanceOf(Uint8Array);
      expect(result[0]?.signature).toBeInstanceOf(Uint8Array);
      expect(result[0]?.caveats).toEqual([]);
    });
  });

  describe('encodeDelegations and decodeDelegations, round trip', () => {
    it('encode then decode produces same result', () => {
      const originalDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x9999999999999999999999999999999999999999',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const encoded = encodeDelegations([originalDelegation]);
      const decoded = decodeDelegations(encoded);

      expect(decoded).toEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123', // Note: decode normalizes to lowercase
          authority: ROOT_AUTHORITY,
          caveats: [
            {
              enforcer: '0x9999999999999999999999999999999999999999',
              terms: '0xdeadbeef',
              args: '0xcafebabe',
            },
          ],
          salt: 66n,
          signature: '0x789abc',
        },
      ]);
    });

    it('encode then decode produces same result when encoding as bytes', () => {
      const originalDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x9999999999999999999999999999999999999999',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const encoded = encodeDelegations([originalDelegation], { out: 'bytes' });
      const decoded = decodeDelegations(encoded);

      expect(decoded).toEqual([
        {
          delegate: '0x1234567890123456789012345678901234567890',
          delegator: '0xabcdef0123456789012345678901234567890123', // Note: decode normalizes to lowercase
          authority: ROOT_AUTHORITY,
          caveats: [
            {
              enforcer: '0x9999999999999999999999999999999999999999',
              terms: '0xdeadbeef',
              args: '0xcafebabe',
            },
          ],
          salt: 66n,
          signature: '0x789abc',
        },
      ]);
    });

    it('handles multiple complex delegations', () => {
      const originalDelegations: DelegationStruct[] = [
        {
          delegate: '0x1111111111111111111111111111111111111111',
          delegator: '0x2222222222222222222222222222222222222222',
          authority: ROOT_AUTHORITY,
          caveats: [
            {
              enforcer: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
              terms: '0xdead',
              args: '0xbeef',
            },
          ],
          salt: 0x1n,
          signature: '0x0abc',
        },
        {
          delegate: '0x3333333333333333333333333333333333333333',
          delegator: '0x4444444444444444444444444444444444444444',
          authority:
            '0x5555555555555555555555555555555555555555555555555555555555555555',
          caveats: [
            {
              enforcer: '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
              terms: '0xfeed',
              args: '0xface',
            },
            {
              enforcer: '0xcccccccccccccccccccccccccccccccccccccccc',
              terms: '0xcafe',
              args: '0xbabe',
            },
          ],
          salt: 0x2n,
          signature: '0x0def',
        },
      ];

      const encoded = encodeDelegations(originalDelegations);
      const decoded = decodeDelegations(encoded);

      expect(decoded).toStrictEqual(originalDelegations);
    });
  });

  describe('hashDelegation', () => {
    it('returns the correct hash for a delegation with no caveats', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority:
          '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0xcaeb6434dc99e3098ff79ea1458a16b3e53b380f211cdb359628f9302d9c41b4"`,
      );
    });

    it('returns the correct hash for a delegation with a single caveat', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x9999999999999999999999999999999999999999',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0x2c67f5e651bf654552c047f3bdc935996eb8867fea62274ebd6643522a34ea65"`,
      );
    });

    it('returns the correct hash for a delegation with multiple caveats', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
          {
            enforcer: '0x2222222222222222222222222222222222222222',
            terms: '0xfeedface',
            args: '0xdeadc0de',
          },
        ],
        salt: 0x123n,
        signature: '0x456789',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0x71a41e757d3aba596d483d0414a1681961573e8024238c4e72b19c194627fbdb"`,
      );
    });

    it('returns the correct hash for a delegation with custom authority', () => {
      const customAuthority =
        '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd';
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: customAuthority,
        caveats: [],
        salt: 0x999n,
        signature: '0xffffff',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0xeb8ff35e32030bee23e16167e98536ccf4dffb79558d0fb76b73628fc70805cd"`,
      );
    });

    it('returns the correct hash for a delegation with zero salt', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x0n,
        signature: '0x123456',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0xa05839f6864d332530b2d1a4043668777940e609931ae9c09d19b866a1408a6b"`,
      );
    });

    it('returns the correct hash for a delegation with maximum salt', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn,
        signature: '0x123456',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0xbbc3b60ea68fa14fa170a207435a4ae96cf3adc8ab488d7bfa57e9c8da67f9af"`,
      );
    });

    it('produces consistent hashes for the same delegation', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x9999999999999999999999999999999999999999',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hash1 = hashDelegation(delegation);
      const hash2 = hashDelegation(delegation);

      expect(hash1).toEqual(hash2);
    });

    it('produces different hashes for different delegates', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        delegate: '0x9876543210987654321098765432109876543210',
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      expect(hash1).not.toEqual(hash2);
    });

    it('produces different hashes for different delegators', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        delegator: '0x9876543210987654321098765432109876543210',
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      expect(hash1).not.toEqual(hash2);
    });

    it('produces different hashes for different authorities', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        authority:
          '0x1111111111111111111111111111111111111111111111111111111111111111',
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      expect(hash1).not.toEqual(hash2);
    });

    it('produces different hashes for different salts', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        salt: 0x43n,
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      expect(hash1).not.toEqual(hash2);
    });

    it('produces different hashes for different caveat enforcers', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        caveats: [
          {
            enforcer: '0x2222222222222222222222222222222222222222',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      expect(hash1).not.toEqual(hash2);
    });

    it('produces different hashes for different caveat terms', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xfeedface',
            args: '0xcafebabe',
          },
        ],
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      expect(hash1).not.toEqual(hash2);
    });

    it('produces the same hash regardless of caveat args (args are not part of hash)', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xdeadbeef',
            args: '0xdeadc0de', // Different args
          },
        ],
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      // Args should not affect the hash according to the implementation
      expect(hash1).toEqual(hash2);
    });

    it('produces the same hash regardless of signature (signature is not part of hash)', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        signature: '0xffffff', // Different signature
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      // Signature should not affect the hash according to the implementation
      expect(hash1).toEqual(hash2);
    });

    it('produces different hashes for different caveat order', () => {
      const baseDelegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
          {
            enforcer: '0x2222222222222222222222222222222222222222',
            terms: '0xfeedface',
            args: '0xdeadc0de',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const altDelegation: DelegationStruct = {
        ...baseDelegation,
        caveats: [
          {
            enforcer: '0x2222222222222222222222222222222222222222',
            terms: '0xfeedface',
            args: '0xdeadc0de',
          },
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0xdeadbeef',
            args: '0xcafebabe',
          },
        ],
      };

      const hash1 = hashDelegation(baseDelegation);
      const hash2 = hashDelegation(altDelegation);

      expect(hash1).not.toEqual(hash2);
    });

    it('handles delegations with empty caveat terms', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0x1111111111111111111111111111111111111111',
            terms: '0x',
            args: '0xcafebabe',
          },
        ],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0xeb607828d330ff18bb9e0cffb3941c53c289fdf9ab412f7bc0fe3c09dfd2878c"`,
      );
    });

    it('returns a hex string by default', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hash = hashDelegation(delegation);

      expect(hash).toMatchInlineSnapshot(
        `"0xcaeb6434dc99e3098ff79ea1458a16b3e53b380f211cdb359628f9302d9c41b4"`,
      );
    });

    it('handles mixed case addresses consistently', () => {
      const delegation1: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0xaaBBccDDeeFF1122334455667788990011223344',
            terms: '0xdead',
            args: '0xbeef',
          },
        ],
        salt: 0x1n,
        signature: '0x789',
      };

      const delegation2: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xabcdef0123456789012345678901234567890123', // lowercase
        authority: ROOT_AUTHORITY,
        caveats: [
          {
            enforcer: '0xAABBCCDDEEFF1122334455667788990011223344', // uppercase
            terms: '0xdead',
            args: '0xbeef',
          },
        ],
        salt: 0x1n,
        signature: '0x789',
      };

      const hash1 = hashDelegation(delegation1);
      const hash2 = hashDelegation(delegation2);

      // Addresses should be treated the same regardless of case
      expect(hash1).toEqual(hash2);
    });

    it('returns bytes when specified in options', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hash = hashDelegation(delegation, { out: 'bytes' });

      expect(hash).toBeInstanceOf(Uint8Array);
      expect(hash).toMatchInlineSnapshot(`
        Uint8Array [
          202,
          235,
          100,
          52,
          220,
          153,
          227,
          9,
          143,
          247,
          158,
          161,
          69,
          138,
          22,
          179,
          229,
          59,
          56,
          15,
          33,
          28,
          219,
          53,
          150,
          40,
          249,
          48,
          45,
          156,
          65,
          180,
        ]
      `);
    });

    it('returns hex when explicitly specified in options', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hash = hashDelegation(delegation, { out: 'hex' });

      expect(hash).toMatchInlineSnapshot(
        `"0xcaeb6434dc99e3098ff79ea1458a16b3e53b380f211cdb359628f9302d9c41b4"`,
      );
    });

    it('produces same result in different formats', () => {
      const delegation: DelegationStruct = {
        delegate: '0x1234567890123456789012345678901234567890',
        delegator: '0xABCDEF0123456789012345678901234567890123',
        authority: ROOT_AUTHORITY,
        caveats: [],
        salt: 0x42n,
        signature: '0x789abc',
      };

      const hashHex = hashDelegation(delegation, { out: 'hex' });
      const hashBytes = hashDelegation(delegation, { out: 'bytes' });

      const hashFromBytes = bytesToHex(hashBytes);

      expect(hashHex).toBe(hashFromBytes);
    });
  });
});
